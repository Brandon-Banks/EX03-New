#include <iostream>
#include <cmath>	
#include <string>
using namespace std;

class LinearEquation
{
private:
	double a, b, c, d, e, f;
	// Initialize the variables that the user can't change
public:
	LinearEquation(double newA, double newB, double newC,
		double newD, double newE, double newF);
	double getA();
	double getB();
	double getC();
	double getD();
	double getE();
	double getF();
	bool isSolvable();
	double getX();
	double getY();

	// Initialized the other variables that are in the public class
};

LinearEquation::LinearEquation(double newA, double newB, double newC,
	double newD, double newE, double newF)
{
	a = newA;
	b = newB;
	c = newC;
	d = newD;
	e = newE;
	f = newF;
}

// Return all of the values...... each one...

double LinearEquation::getA()
{
	return a;
}

double LinearEquation::getB()
{
	return b;
}

double LinearEquation::getC()
{
	return c;
}

double LinearEquation::getD()
{
	return d;
}

double LinearEquation::getE()
{
	return e;
}

double LinearEquation::getF()
{
	return f;
}

double LinearEquation::getX()
{
	double x = (e * d - b * f) / (a * d - b * c);
	return x;
}
// Math
double LinearEquation::getY()
{
	double y = (a * f - e * c) / (a * d - b * c);
	return y;
}
// Some more math
bool LinearEquation::isSolvable()
{
	return a * d - b * c != 0;
}
// Not all points intersect
int main() {
	double x1, y1, x2, y2, x3, y3, x4, y4;

	system("cls");

	cout << "Give me the coordinates of the first line! ";
	cin >> x1 >> y1 >> x2 >> y2;

	cout << "Give me the coordinates of the second line! ";
	cin >> x3 >> y3 >> x4 >> y4;

	double a = (y1 - y2);
	double b = (-x1 + x2);
	double c = (y3 - y4);
	double d = (-x3 + x4);
	double e = -y1 * (x1 - x2) + (y1 - y2) * x1;
	double f = -y3 * (x3 - x4) + (y3 - y4) * x3;

	// Time to get mathmatical

	LinearEquation equation(a, b, c, d, e, f);

	if (equation.isSolvable())
	{
		cout << "The point at which they intersect is: (" << equation.getX() << ", " << equation.getY() << ")" << endl;
	}
	// Outputs the points that the lines intersect
	else
	{
		cout << "The two lines will never intersect! Ever..... " << endl;
	}
	// If the points will never intersect, it will display a different outcome
	return 0;
}
